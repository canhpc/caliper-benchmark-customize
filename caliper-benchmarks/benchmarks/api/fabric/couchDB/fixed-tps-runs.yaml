---
test:
  name: fixed-tps-runs
  description: Benchmark run to enable resource comparrison for benchmarks
  clients:
    type: local
    number: 4
  rounds:
  - label: create-asset-8000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `createAsset`, which inserts an asset of size 8000 bytes into the World State database.
    chaincodeId: fixed-asset
    txDuration:
    - 120
    rateControl:
    - type: fixed-rate
      opts:
        tps: 125
    arguments:
      bytesize: 8000
    callback: benchmarks/api/fabric/lib/create-asset.js
  - label: create-asset-batch-20-8000
    description: Test a submitTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `createAssetsFromBatch`, which inserts a batch of 20 assets of size 8k bytes into the World State database.
    chaincodeId: fixed-asset
    txDuration:
    - 120
    rateControl:
    - type: fixed-rate
      opts:
        tps: 15
    arguments:
      bytesize: 8000
      batchsize: 20
    callback: benchmarks/api/fabric/lib/batch-create-asset.js
  - label: get-asset-evaluate-8000
    description: Test an evaluateTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `getAsset`. This method performs a getState on an item that matches an asset of size 8000 bytes.
    chaincodeId: fixed-asset
    txDuration:
    - 120
    rateControl:
     - type: fixed-rate
       opts:
         tps: 350
    arguments:
      create_sizes: [100,1000,2000,4000,8000,16000,32000,64000]
      bytesize: 8000
      assets: 1000
      consensus: false
    callback: benchmarks/api/fabric/lib/get-asset.js
  - label: get-asset-batch-evaluate-20-8000
    description: Test an evaluateTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `getAssetsFromBatch`. This method performs a getState on a batch of 20 UUIDs that each match an asset of size 8000 bytes.
    chaincodeId: fixed-asset
    txDuration:
    - 120
    rateControl:
    - type: fixed-rate
      opts:
        tps: 30
    arguments:
      create_sizes: [8000]
      assets: 8000
      bytesize: 8000
      batchsize: 20
      consensus: false
    callback: benchmarks/api/fabric/lib/batch-get-asset.js
  - label: mixed-range-query-evaluate-20
    description: Test an evaluateTransaction() Gateway method against the NodeJS `fixed-asset` Smart Contract method named `paginatedRangeQuery`. This method performs a paginated range query, with a passed pagesize of 20 and a range keys that bound 200 assets created by the calling client.
    chaincodeId: fixed-asset
    txDuration:
    - 120
    rateControl:
    - type: fixed-rate
      opts:
        tps: 30
    arguments:
      range: 200
      offset: 100
      pagesize: '20'
      create_sizes: [100,1000,2000,4000,8000,16000,32000,64000]
      consensus: false
    callback: benchmarks/api/fabric/lib/mixed-range-query-asset.js
monitor:
  type:
  - docker
  - process
  docker:
    name:
    - all
  process:
  - command: node
    arguments: fabricClientWorker.js
    multiOutput: avg
  interval: 1
